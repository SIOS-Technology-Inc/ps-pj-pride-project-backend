name: Development CI

on:
  workflow_dispatch:
  pull_request:
  pull_request_target:
    types:
      - closed
    branches:
      - "main"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: "20.10.0"

jobs:
  build-application:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: npm install node_modules
        run: npm ci
        working-directory: backend

      - name: npm build
        run: npm run build
        working-directory: backend

      - name: Upload Cache app
        uses: actions/cache@v4
        with:
          path: backend/dist/
          key: ${{ runner.os }}-app-${{ github.sha }}

  build-and-push-image:
    runs-on: ubuntu-22.04
    needs: build-application
    permissions:
      contents: read
      packages: write
    outputs:
      build-image-name: ${{steps.build-image-name.outputs.container-image-name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: actions/setup-node@v4
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Download Cache app
        uses: actions/cache@v4
        with:
          path: backend/dist/
          key: ${{ runner.os }}-app-${{ github.sha }}

      - name: npm install node_modules
        run: npm install --production
        working-directory: backend

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: ${{ github.sha }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          build-args: NODE_VER=${{env.NODE_VERSION}}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          cache-from: type=local,src=/tmp/.buildx-cache

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Output built container image name
        id: build-image-name
        run: |
          echo "container-image-name=${{steps.meta.outputs.tags}}" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: "build-and-push-image"
    if: ${{ github.ref == 'refs/heads/main'}}
    environment:
      name: "production"

    steps:
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: "pride-content"
          slot-name: "production"
          publish-profile: ${{ secrets.AzureAppService_PublishProfile_2b0a6faf53154143a7f25f7cf32f79af }}
          images: ${{needs.build-and-push-image.outputs.build-image-name}}
